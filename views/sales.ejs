<%- include('datahead.ejs') %>
<style>
  /* Buttons styling like purchases */
  .dt-button.buttons-copy {
    background-color: #17a2b8 !important;
    color: white !important;
    border-radius: 5px;
  }
  .dt-button.buttons-excel {
    background-color: #28a745 !important;
    color: white !important;
    border-radius: 5px;
  }
  .dt-button.buttons-pdf {
    background-color: #dc3545 !important;
    color: white !important;
    border-radius: 5px;
  }
  .dt-button.buttons-print {
    background-color: #007bff !important;
    color: white !important;
    border-radius: 5px;
  }
  .dt-button.buttons-colvis {
    background-color: #6c757d !important;
    color: white !important;
    border-radius: 5px;
  }
</style>

<section class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6"><h1>Sales List</h1></div>
      <div class="col-sm-6 text-right">
        <a href="/salevoucher" class="btn btn-success">New Sale</a>
      </div>
    </div>
  </div>
</section>

<section class="content">
  <div class="container-fluid">
    <!-- Filters -->
    <div class="row mb-3">
      <div class="col-md-4">
        <label>Filter by Date</label>
        <input type="date" id="filter-date" class="form-control" />
      </div>
      <div class="col-md-4">
        <label>Filter by Month</label>
        <input type="month" id="filter-month" class="form-control" />
      </div>
      <div class="col-md-4">
        <label>Filter by Customer</label>
        <input
          type="text"
          id="filter-customer"
          class="form-control"
          placeholder="Type customer name (contains)"
        />
      </div>
    </div>

    <!-- Total Summary -->
    <div class="row mb-3">
      <div class="col-md-4">
        <div class="alert alert-info">
          <strong>Total Sales:</strong> <span id="summary-total">0</span>
        </div>
      </div>
      <div class="col-md-4">
        <div class="alert alert-success">
          <strong>Total Received:</strong> <span id="summary-paid">0</span>
        </div>
      </div>
      <div class="col-md-4">
        <div class="alert alert-primary">
          <strong>Total Remaining:</strong>
          <span id="summary-remaining">0</span>
        </div>
      </div>
    </div>

    <!-- Per-Customer Summary -->
    <div class="row mb-3 d-none">
      <div class="col-12">
        <div class="card">
          <div class="card-header bg-secondary text-white">
            <h5 class="card-title mb-0">Summary by Customer</h5>
          </div>
          <div class="card-body">
            <table
              class="table table-bordered table-sm"
              id="customerSummaryTable"
            >
              <thead>
                <tr>
                  <th>Customer</th>
                  <th>Phone</th>
                  <th>Address</th>
                  <th>Total</th>
                  <th>Received</th>
                  <th>Remaining</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <!-- Sales Table -->
    <div class="row">
      <div class="col-12">
        <div class="card">
          <div class="card-header bg-success text-white">
            <h5 class="card-title mb-0">All Sales</h5>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table
                class="table table-bordered table-striped table-hover w-100"
                id="salesTable"
              >
                <thead class="bg-success">
                  <tr>
                    <th>Invoice #</th>
                    <th>Customer</th>
                    <th>Address</th>
                    <th>Phone</th>
                    <th>Date</th>
                    <th>Total</th>
                    <th>Paid</th>
                    <th>Remaining</th>
                    <th>Status</th>
                    <th>Items</th>
                    <th style="width: 40px">Action</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Items Modal -->
  <div class="modal fade" id="saleItemsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Sale Items</h5>
          <button type="button" class="close" data-dismiss="modal">
            &times;
          </button>
        </div>
        <div class="modal-body">
          <table class="table table-bordered">
            <thead>
              <tr>
                <th>Product</th>
                <th>Size</th>
                <th>Unit</th>
                <th>Qty</th>
                <th>Unit Price</th>
                <th>Line Discount</th>
                <th>Subtotal</th>
              </tr>
            </thead>
            <tbody id="saleItemsTableBody"></tbody>
            <tfoot>
              <tr>
                <td colspan="6" class="text-end"><b>Gross</b></td>
                <td id="modalGross"></td>
              </tr>
              <tr>
                <td colspan="6" class="text-end"><b>Line Discounts</b></td>
                <td id="modalLineDiscounts"></td>
              </tr>
              <tr>
                <td colspan="6" class="text-end">
                  <b>Subtotal After Line Discounts</b>
                </td>
                <td id="modalSubtotalAfter"></td>
              </tr>
            </tfoot>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- Payment Modal -->
  <div class="modal fade" id="salePaymentModal" tabindex="-1">
    <div class="modal-dialog modal-md">
      <div class="modal-content">
        <div class="modal-header bg-success text-white">
          <h5 class="modal-title">Record Payment</h5>
          <button type="button" class="close text-white" data-dismiss="modal">
            &times;
          </button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="pay-sale-id" />
          <div class="form-group">
            <label>Total</label>
            <input type="text" id="pay-total" class="form-control" readonly />
          </div>
          <div class="form-group">
            <label>Already Paid</label>
            <input type="text" id="pay-already" class="form-control" readonly />
          </div>
          <div class="form-group">
            <label>Remaining</label>
            <input
              type="text"
              id="pay-remaining"
              class="form-control"
              readonly
            />
          </div>
          <div class="form-group">
            <label>Pay Now</label>
            <input
              type="number"
              step="0.01"
              id="pay-amount"
              class="form-control"
            />
          </div>
          <div class="alert alert-danger d-none" id="pay-error"></div>
        </div>
        <div class="modal-footer">
          <button class="btn btn-success" id="save-sale-payment">Pay</button>
          <button class="btn btn-secondary" data-dismiss="modal">Cancel</button>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const fmt = (n) =>
      (parseFloat(n) || 0).toLocaleString("en-US", {
        minimumFractionDigits: 2,
      });

    const summaryTotal = document.getElementById("summary-total");
    const summaryPaid = document.getElementById("summary-paid");
    const summaryRemaining = document.getElementById("summary-remaining");
    const customerTbody = document.querySelector("#customerSummaryTable tbody");

    // FIX: group by a stable identity â€” prefer customer_id; fallback to name+phone+address
    const makeKey = (r) => {
      if (r.customer_id) return `id:${r.customer_id}`;
      const name = (r.customer_name || "").trim();
      const phone = (r.customer_phone || "").trim();
      const addr = (r.customer_address || "").trim();
      return `npaddr:${name}||${phone}||${addr}`;
    };

    const updateCustomerSummary = (sales) => {
      const totals = {};
      sales.forEach((s) => {
        const key = makeKey(s);
        if (!totals[key]) {
          totals[key] = {
            name: s.customer_name || "-",
            phone: s.customer_phone || "-",
            address: s.customer_address || "-",
            total: 0,
            paid: 0,
            remaining: 0,
          };
        }
        totals[key].total += parseFloat(s.total_amount) || 0;
        totals[key].paid += parseFloat(s.total_paid) || 0;
        totals[key].remaining += parseFloat(s.remaining) || 0;
      });

      const rows = Object.values(totals)
        .map(
          (v) => `
          <tr>
            <td>${v.name}</td>
            <td>${v.phone}</td>
            <td>${v.address}</td>
            <td>${fmt(v.total)}</td>
            <td>${fmt(v.paid)}</td>
            <td>${fmt(v.remaining)}</td>
          </tr>`
        )
        .join("");
      customerTbody.innerHTML =
        rows ||
        `<tr><td colspan="6" class="text-center text-muted">No data</td></tr>`;
    };

    const salesTable = $("#salesTable").DataTable({
      ajax: {
        url: "/sales/ajax",
        data: function (d) {
          d.date = $("#filter-date").val();
          d.month = $("#filter-month").val();
          d.customer = $("#filter-customer").val();
        },
        dataSrc: function (json) {
          let total = 0,
            paid = 0,
            remaining = 0;
          json.forEach((r) => {
            total += parseFloat(r.total_amount) || 0;
            paid += parseFloat(r.total_paid) || 0;
            remaining += parseFloat(r.remaining) || 0;
          });
          summaryTotal.textContent = fmt(total);
          summaryPaid.textContent = fmt(paid);
          summaryRemaining.textContent = fmt(remaining);
          updateCustomerSummary(json);
          return json;
        },
      },
      columns: [
        { data: "invoice_number" },
        { data: "customer_name" },
        { data: "customer_address" },
        { data: "customer_phone" },
        { data: "sale_date" },
        {
          data: "total_amount",
          render: (d) => fmt(d),
          className: "text-right",
        },
        {
          data: "total_paid",
          render: (d) => fmt(d),
          className: "text-right",
        },
        {
          data: "remaining",
          render: (d) => fmt(d),
          className: "text-right",
        },
        { data: "status" },
        {
          data: null,
          render: (row) =>
            `<button class="btn btn-sm btn-info view-items" data-id="${row.sale_id}">View</button>`,
          className: "text-center",
        },
        {
          data: null,
          render: (row) => {
            const payBtn =
              (parseFloat(row.remaining) || 0) > 0
                ? `<button class="btn btn-sm btn-success record-payment" data-id="${row.sale_id}"
                    data-total="${row.total_amount}" data-paid="${row.total_paid}" data-remaining="${row.remaining}">Pay</button>`
                : "";
            return `${payBtn} <button class="btn btn-sm btn-danger delete-sale" data-id="${row.sale_id}">Delete</button>`;
          },
          className: "text-center text-nowrap",
        },
      ],
      dom: "Bflrtip",

      buttons: [
        {
          extend: "copy",
          text: '<i class="fas fa-copy"></i> Copy',
          title: "Sales Report",
          className: "bg-primary",
          exportOptions: { columns: ":visible" },
        },
        {
          extend: "excel",
          text: '<i class="fas fa-file-excel"></i> Excel',
          title: "Sales Report",
          className: "bg-success",
          exportOptions: { columns: ":visible" },
        },
        {
          extend: "pdf",
          className: "bg-danger",
          text: '<i class="fas fa-file-pdf"></i> PDF',
          title: "Sales Report",
          exportOptions: { columns: ":visible" },
        },
        {
          extend: "print",
          exportOptions: { columns: ":visible" },
          className: "bg-info",
          text: '<i class="fas fa-print"></i> Print',
          title: "Sales Report",
          customize(win) {
            $(win.document.body)
              .css("font-size", "12pt")
              .prepend(
                '<h3 style="text-align:center; color:#007bff;">Shop Sales Report</h3>'
              );
          },
        },
        {
          extend: "colvis",
          className: "bg-indigo",
          text: '<i class="fas fa-columns"></i> Columns',
        },
      ],
      language: {
        emptyTable:
          "<div style='color:black; font-weight:bold;'><h1>ðŸ“­ </h1>Try changing the date/month/customer filter.</div>",
      },
      pageLength: 10,
      deferLoading: 0,
    });

    $("#filter-date, #filter-month, #filter-customer").on("change keyup", () =>
      salesTable.ajax.reload()
    );

    // View items
    $("#salesTable").on("click", ".view-items", function () {
      const id = $(this).data("id");
      fetch(`/sales/items/${id}`)
        .then((r) => r.json())
        .then((items) => {
          const tb = document.getElementById("saleItemsTableBody");
          tb.innerHTML = items
            .map(
              (i) => `
                <tr>
                  <td>${i.product_name}</td>
                  <td>${i.size_label}</td>
                  <td>${i.unit_label}</td>
                  <td>${i.quantity}</td>
                  <td>${(parseFloat(i.unit_price) || 0).toFixed(2)}</td>
                  <td>${(parseFloat(i.discount) || 0).toFixed(2)}</td>
                  <td>${(parseFloat(i.subtotal) || 0).toFixed(2)}</td>
                </tr>`
            )
            .join("");
          const gross = items.reduce(
            (s, i) =>
              s +
              (parseFloat(i.unit_price) || 0) * (parseFloat(i.quantity) || 0),
            0
          );
          const lineDisc = items.reduce(
            (s, i) => s + (parseFloat(i.discount) || 0),
            0
          );
          const subAfter = items.reduce(
            (s, i) => s + (parseFloat(i.subtotal) || 0),
            0
          );
          document.getElementById("modalGross").innerText = gross.toFixed(2);
          document.getElementById("modalLineDiscounts").innerText =
            lineDisc.toFixed(2);
          document.getElementById("modalSubtotalAfter").innerText =
            subAfter.toFixed(2);
          $("#saleItemsModal").modal("show");
        })
        .catch(() => Swal.fire("Error", "Cannot load items", "error"));
    });

    // Record payment
    $("#salesTable").on("click", ".record-payment", function () {
      const id = $(this).data("id");
      const total = parseFloat($(this).data("total")) || 0;
      const paid = parseFloat($(this).data("paid")) || 0;
      const remaining = parseFloat($(this).data("remaining")) || 0;
      $("#pay-sale-id").val(id);
      $("#pay-total").val(fmt(total));
      $("#pay-already").val(fmt(paid));
      $("#pay-remaining").val(fmt(remaining));
      $("#pay-amount").val("");
      $("#pay-error").addClass("d-none");
      $("#salePaymentModal").modal("show");
    });

    $("#pay-amount").on("input", function () {
      const remaining =
        parseFloat($("#pay-remaining").val().replace(/,/g, "")) || 0;
      const val = parseFloat($(this).val()) || 0;
      if (val > remaining) {
        $("#pay-error")
          .removeClass("d-none")
          .text("Cannot exceed remaining amount");
      } else {
        $("#pay-error").addClass("d-none");
      }
    });

    $("#save-sale-payment").on("click", () => {
      const id = $("#pay-sale-id").val();
      const payNow = parseFloat($("#pay-amount").val());
      const remaining =
        parseFloat($("#pay-remaining").val().replace(/,/g, "")) || 0;
      if (!payNow || payNow <= 0)
        return Swal.fire("Error", "Enter valid amount", "error");
      if (payNow > remaining)
        return Swal.fire("Error", "Payment cannot exceed Remaining", "error");

      fetch(`/sales/pay/${id}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ amount: payNow }),
      })
        .then((r) => r.json())
        .then((j) => {
          if (j.success) {
            $("#salePaymentModal").modal("hide");
            salesTable.ajax.reload(null, false);
            Swal.fire("Success", "Payment recorded", "success");
          } else {
            Swal.fire(
              "Error",
              j.message || "Failed to record payment",
              "error"
            );
          }
        })
        .catch(() => Swal.fire("Error", "Network error", "error"));
    });

    // Delete sale (restore stock)
    $("#salesTable").on("click", ".delete-sale", function () {
      const id = $(this).data("id");
      Swal.fire({
        title: "Delete sale?",
        text: "This will remove sale and restore stock!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, delete!",
        confirmButtonColor: "#d33",
      }).then((res) => {
        if (!res.isConfirmed) return;
        fetch(`/sales/delete/${id}`, { method: "DELETE" })
          .then((r) => r.json())
          .then((j) => {
            if (j.success) {
              salesTable.ajax.reload();
              Swal.fire("Deleted", "Sale removed", "success");
            } else {
              Swal.fire("Error", j.message || "Cannot delete sale", "error");
            }
          })
          .catch(() => Swal.fire("Error", "Network error", "error"));
      });
    });
  });
</script>

<%- include('datafoot.ejs') %>
