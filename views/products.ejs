<%- include('datahead.ejs') %>

<section class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1>Products by Category</h1>
      </div>
      <div class="col-sm-6 text-right">
        <div class="d-inline-block mr-2">
          <label class="mr-2">Subtotal by:</label>
          <select
            id="subtotal-toggle"
            class="form-control d-inline-block"
            style="width: 150px"
          >
            <option value="cost">Cost Price</option>
            <option value="sale">Sale Price</option>
          </select>
        </div>
        <button class="btn btn-success" id="printAllBarcodes">
          Print All Barcodes
        </button>
      </div>
    </div>
  </div>
</section>

<section class="content">
  <div class="container-fluid">
    <div class="mb-3">
      <select id="category-select" class="form-control w-25 d-inline-block">
        <option value="">-- Select Category --</option>
        <% categories.forEach(cat => { %>
        <option value="<%= cat.category_id %>"><%= cat.name %></option>
        <% }) %>
      </select>
    </div>

    <!-- Category totals -->
    <div class="row mb-3">
      <div class="col-md-6">
        <div class="alert alert-info">
          <strong>Category total (Cost):</strong>
          <span id="category-total-cost">0</span>
        </div>
      </div>
      <div class="col-md-6">
        <div class="alert alert-success">
          <strong>Category total (Sale):</strong>
          <span id="category-total-sale">0</span>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-12">
        <div class="card">
          <div class="card-header bg-primary text-white">
            <h5 class="card-title mb-0">Product List</h5>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table
                class="table table-bordered table-striped table-hover w-100"
                id="example1"
              >
                <thead class="bg-primary">
                  <tr>
                    <th>Product Name</th>
                    <th>Size</th>
                    <th>Package</th>
                    <th>Cost Price</th>
                    <th>Sale Price</th>
                    <th>Barcode</th>
                    <th>Stock</th>
                    <th>Subtotal</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
            <small class="text-muted">
              Note: Subtotal = price Ã— stock. Toggle between cost & sale mode
              above.
            </small>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Edit Price Modal -->
<div
  class="modal fade"
  id="editPriceModal"
  tabindex="-1"
  role="dialog"
  aria-labelledby="editPriceModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title"><strong>Update Product Price</strong></h5>
        <button type="button" class="close" data-dismiss="modal">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <input type="hidden" id="edit-product-id" />
        <div class="form-group">
          <label>Cost Price</label>
          <input
            type="number"
            id="edit-cost-price"
            class="form-control"
            min="0"
            step="0.01"
          />
        </div>
        <div class="form-group">
          <label>Sale Price</label>
          <input
            type="number"
            id="edit-sale-price"
            class="form-control"
            min="0"
            step="0.01"
          />
        </div>
        <div id="edit-price-error" class="alert alert-danger d-none"></div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-success" id="save-price">Save</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">
          Cancel
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Barcode Modal -->
<div class="modal fade" id="barcodeModal" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content text-center p-3" id="barcodePrintArea">
      <h5 class="mb-2">Product Barcode</h5>
      <svg id="barcodeDisplay"></svg>
      <div id="barcodeLabel" class="mt-2 small"></div>
      <div class="mt-3">
        <button type="button" class="btn btn-primary" onclick="printBarcode()">
          Print
        </button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Hidden Print Container (for "Print All") -->
<div id="printArea" style="display: none"></div>

<!-- Libs -->
<script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  let table;
  let subtotalMode = "cost"; // cost or sale
  const nf = (n) =>
    (parseFloat(n) || 0).toLocaleString("en-US", { minimumFractionDigits: 2 });

  function recalcCategoryTotals(rowsData) {
    let totalCost = 0,
      totalSale = 0;
    rowsData.forEach((r) => {
      const qty = parseFloat(r.stock_qty) || 0;
      totalCost += (parseFloat(r.cost_price) || 0) * qty;
      totalSale += (parseFloat(r.sale_price) || 0) * qty;
    });
    document.getElementById("category-total-cost").textContent = nf(totalCost);
    document.getElementById("category-total-sale").textContent = nf(totalSale);
  }

  document.addEventListener("DOMContentLoaded", function () {
    table = $("#example1").DataTable({
      processing: true,
      serverSide: false,
      ajax: {
        url: "/products/ajax",
        data: function (d) {
          d.category_id = $("#category-select").val();
        },
        dataSrc: (json) => {
          const rows = Array.isArray(json)
            ? json
            : json && Array.isArray(json.data)
            ? json.data
            : [];
          recalcCategoryTotals(rows);
          return rows;
        },
      },

      columns: [
        { data: "name" },
        { data: "package_size" },
        { data: "unit_label" },
        { data: "cost_price", render: (d) => nf(d), className: "text-right" },
        { data: "sale_price", render: (d) => nf(d), className: "text-right" },
        { data: "barcode" },
        { data: "stock_qty", className: "text-right" },
        {
          data: null,
          render: (data, type, row) => {
            const qty = parseFloat(row.stock_qty) || 0;
            if (subtotalMode === "sale") {
              return nf((parseFloat(row.sale_price) || 0) * qty);
            } else {
              return nf((parseFloat(row.cost_price) || 0) * qty);
            }
          },
          className: "text-right",
        },
        {
          data: null,
          render: (row) => `
      <button class="btn btn-sm btn-primary edit-price"
        data-id="${row.id}" data-cost="${row.cost_price}" data-sale="${
            row.sale_price
          }">Edit</button>
      <button class="btn btn-sm btn-danger delete-product" data-id="${
        row.id
      }">Delete</button>
      <button class="btn btn-sm btn-info view-barcode"
        data-name="${escapeHtml(row.name)}"
        data-size="${escapeHtml(row.package_size)}"
        data-unit="${escapeHtml(row.unit_label)}"
        data-barcode="${escapeHtml(row.barcode)}">Barcode</button>`,
          className: "text-nowrap",
        },
      ],

      dom: "Bflrtip",
      buttons: [
        {
          extend: "copy",
          text: '<i class="fas fa-copy"></i> Copy',
          className: "bg-primary",
          title: "Product Report",
          exportOptions: { columns: ":visible" },
        },
        {
          extend: "excel",
          text: '<i class="fas fa-file-excel"></i>Excel',
          className: "bg-success",
          title: "Product Report",
          exportOptions: { columns: ":visible" },
        },
        {
          extend: "pdf",
          className: "bg-danger",
          text: '<i class="fas fa-file-pdf"></i> PDF Report',
          title: "Product Report - KhaingMar", // PDF Title
          exportOptions: { columns: ":visible" },
        },
        {
          extend: "print",
          className: "bg-info",
          text: '<i class="fas fa-print"></i> Print',
          title: "Product Report - KhaingMar", // Print Header Title
          customize: function (win) {
            // Optional: style print preview
            $(win.document.body)
              .css("font-size", "16pt")
              .prepend(
                '<h3 style="text-align:center; color:#007bff;">Shop Product Report</h3>'
              );
          },
          exportOptions: { columns: ":visible" },
        },
        {
          extend: "colvis",
          className: "bg-indigo",
          text: '<i class="fas fa-columns"></i> Columns',
          title: "Product Report",
        },
      ],

      pageLength: 10,
      drawCallback: function () {
        const rows = this.api().rows({ search: "applied" }).data().toArray();
        recalcCategoryTotals(rows);
      },
    });

    $("#category-select").on("change", () => table.ajax.reload());
    $("#subtotal-toggle").on("change", function () {
      subtotalMode = this.value;
      console.log("Changed subtotal mode:", subtotalMode);
      table.rows().invalidate().draw(false); // force re-render
    });

    // View Barcode
    $("#example1").on("click", ".view-barcode", function () {
      const code = $(this).data("barcode");
      const name = $(this).data("name");
      const size = $(this).data("size");
      const unit = $(this).data("unit");
      if (!code) {
        Swal.fire("No barcode", "This item has no barcode value.", "info");
        return;
      }
      JsBarcode("#barcodeDisplay", code, {
        format: "CODE128",
        width: 2,
        height: 50,
        displayValue: true,
      });
      $("#barcodeLabel").html(`${name} - ${size} ${unit}`);
      $("#barcodeModal").modal("show");
    });

    // Edit price
    $("#example1").on("click", ".edit-price", function () {
      $("#edit-product-id").val($(this).data("id"));
      $("#edit-cost-price").val($(this).data("cost"));
      $("#edit-sale-price").val($(this).data("sale"));
      $("#edit-price-error").addClass("d-none").text("");
      $("#editPriceModal").modal("show");
    });

    $("#save-price").on("click", function () {
      const id = $("#edit-product-id").val();
      const cost = parseFloat($("#edit-cost-price").val()) || 0;
      const sale = parseFloat($("#edit-sale-price").val()) || 0;
      if (sale <= cost) {
        $("#edit-price-error")
          .removeClass("d-none")
          .text("Sale price must be greater than Cost price.");
        return;
      }
      fetch(`/products/update-price/${id}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ cost_price: cost, sale_price: sale }),
      })
        .then((r) => r.json())
        .then((data) => {
          if (data.success) {
            $("#editPriceModal").modal("hide");
            table.ajax.reload(null, false);
            Swal.fire({
              icon: "success",
              title: "Updated",
              text: "Price updated successfully",
              timer: 1500,
              showConfirmButton: false,
            });
          } else {
            $("#edit-price-error")
              .removeClass("d-none")
              .text("Failed to update price.");
          }
        })
        .catch((err) => {
          console.error(err);
          $("#edit-price-error")
            .removeClass("d-none")
            .text("Server error while updating price.");
        });
    });

    // Delete product
    $("#example1").on("click", ".delete-product", function () {
      const id = $(this).data("id");
      Swal.fire({
        title: "Delete product size row?",
        text: "This will remove only the selected size/pack row â€” product master remains.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, delete it!",
        confirmButtonColor: "#d33",
      }).then((res) => {
        if (!res.isConfirmed) return;
        fetch(`/products/delete/${id}`, { method: "DELETE" })
          .then((r) => r.json())
          .then((data) => {
            if (data.success) {
              table.ajax.reload(null, false);
              Swal.fire({
                icon: "success",
                title: "Deleted",
                timer: 1200,
                showConfirmButton: false,
              });
            } else {
              Swal.fire("Error", "Failed to delete product.", "error");
            }
          });
      });
    });

    // Print all
    $("#printAllBarcodes").on("click", function () {
      const data = table.rows({ search: "applied" }).data().toArray();
      const work = document.getElementById("printArea");
      work.innerHTML = "";
      data.forEach((prod, i) => {
        const holder = document.createElement("div");
        holder.className = "label";
        holder.innerHTML = `<div class="label-inner"><svg id="pbc${i}"></svg><div class="label-text">${escapeHtml(
          prod.name
        )} - ${escapeHtml(prod.package_size)} ${escapeHtml(
          prod.unit_label
        )}</div></div>`;
        work.appendChild(holder);
        if (prod.barcode) {
          JsBarcode(`#pbc${i}`, prod.barcode, {
            format: "CODE128",
            width: 2,
            height: 50,
            displayValue: true,
          });
        } else {
          holder
            .querySelector(".label-text")
            .insertAdjacentHTML("afterbegin", "<div>(no barcode)</div>");
        }
      });
      const w = window.open("", "", "width=800,height=900");
      w.document.write(
        `<html><head><title>Print Barcodes</title><style>@page{margin:6mm;}body{font-family:Arial;} .sheet{display:flex;flex-wrap:wrap;} .label{width:60mm;margin:4mm;text-align:center;} .label .label-text{font-size:18px;margin-top:4px;} svg{max-width:100%;}</style></head><body><div class="sheet">${work.innerHTML}</div></body></html>`
      );
      w.document.close();
      w.focus();
      w.onload = () => {
        w.print();
        w.onafterprint = () => w.close();
      };
    });
  });

  function escapeHtml(str) {
    if (str == null) return "";
    return String(str)
      .replace(/&/g, "&amp;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;");
  }

  function printBarcode() {
    // get barcode and label
    const barcodeSVG = document.getElementById("barcodeDisplay").outerHTML;
    const label = document.getElementById("barcodeLabel").innerHTML;

    // open new print window
    const printWindow = window.open("", "_blank");
    printWindow.document.write(`
    <html>
    <head>
      <title>Print Barcode</title>
      <style>
        body { text-align: center; font-family: Arial, sans-serif; }
        svg { width: 200px; height: auto; } /* set barcode size here */
        .label { margin-top: 10px; font-size: 14px; }
      </style>
    </head>
    <body>
      ${barcodeSVG}
      <div class="label">${label}</div>
      <script>
        window.onload = function() {
          window.print();
          window.onafterprint = function() { window.close(); }
        }
      <\/script>
    </body>
    </html>
  `);
    printWindow.document.close();
  }
</script>

<%- include('datafoot.ejs') %>
